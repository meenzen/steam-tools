@using Meenzen.SteamTools.Services
@using Meenzen.SteamTools.Models
@using System.Text.Json
@using Meenzen.SteamTools.Extensions
@using Meenzen.SteamTools.Generated
@inject SteamApi Api
@inject ISnackbar Snackbar
@inject ILogger<PlayTimeCalculator> Logger

@if (Games.Count >= 1)
{
    <MudGrid Class="mt-2" Justify="Justify.Center">
        <MudItem lg="2" md="3" sm="4" xs="6">
            <MudPaper Class="pa-2">
                <MudText Align="Align.Center">
                    <MudIcon Icon="@Icons.Custom.Brands.Steam"/>
                    <MudText Typo="Typo.body1" Align="Align.Center">@Games.Count Games</MudText>
                </MudText>
            </MudPaper>
        </MudItem>
        <PlaytimeCard Text="Total Playtime" Time="@TotalPlaytime"/>
        <PlaytimeCard Text="Last two weeks" Time="@TotalPlaytimeLast2Weeks"/>
        <PlaytimeCard Icon="@Icons.Custom.Brands.MicrosoftWindows" Time="@WindowsPlaytime"/>
        <PlaytimeCard Icon="@Icons.Custom.Brands.Linux" Time="@LinuxPlaytime"/>
        <PlaytimeCard Icon="@Icons.Custom.Brands.Apple" Time="@MacPlaytime"/>
        <PlaytimeCard Text="Playtime Disconnected" Time="@PlaytimeDisconnected"/>
    </MudGrid>
}

@code
{
    [Parameter, EditorRequired]
    public List<OwnedGame> Games { get; set; } = new();

    private TimeSpan TotalPlaytime { get; set; } = TimeSpan.Zero;
    private TimeSpan TotalPlaytimeLast2Weeks { get; set; } = TimeSpan.Zero;
    private TimeSpan WindowsPlaytime { get; set; } = TimeSpan.Zero;
    private TimeSpan LinuxPlaytime { get; set; } = TimeSpan.Zero;
    private TimeSpan MacPlaytime { get; set; } = TimeSpan.Zero;
    private TimeSpan PlaytimeDisconnected { get; set; } = TimeSpan.Zero;

    protected override void OnParametersSet()
    {
        Calculate();
    }

    private void Calculate()
    {
        if (Games.Count < 1)
        {
            return;
        }

        long totalPlaytime = 0;
        long totalPlaytimeLast2Weeks = 0;
        long windowsPlaytime = 0;
        long linuxPlaytime = 0;
        long macPlaytime = 0;
        long playtimeDisconnected = 0;

        foreach (OwnedGame game in Games)
        {
            totalPlaytime += game.PlaytimeForever;
            if (game.Playtime2Weeks is not null)
            {
                totalPlaytimeLast2Weeks += game.Playtime2Weeks.Value;
            }
            windowsPlaytime += game.PlaytimeWindowsForever;
            linuxPlaytime += game.PlaytimeLinuxForever;
            macPlaytime += game.PlaytimeMacForever;
            playtimeDisconnected += game.PlaytimeDisconnected;
        }

        TotalPlaytime = TimeSpan.FromMinutes(totalPlaytime);
        TotalPlaytimeLast2Weeks = TimeSpan.FromMinutes(totalPlaytimeLast2Weeks);
        WindowsPlaytime = TimeSpan.FromMinutes(windowsPlaytime);
        LinuxPlaytime = TimeSpan.FromMinutes(linuxPlaytime);
        MacPlaytime = TimeSpan.FromMinutes(macPlaytime);
        PlaytimeDisconnected = TimeSpan.FromMinutes(playtimeDisconnected);
    }
}
