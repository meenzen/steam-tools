@using Meenzen.SteamTools.Services
@using Blazored.LocalStorage
@using Meenzen.SteamTools.Models
@inject SteamApi Api
@inject ISnackbar Snackbar
@inject ILocalStorageService LocalStorage

@if (!Api.IsConfigured)
{
    <MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="py-4">
        <MudPaper Class="pa-4">
            <MudAlert Severity="Severity.Success">Please provide your SteamID and API key. This allows the app to load data from the Steam API.</MudAlert>
            <MudForm FieldChanged="@Validate">
                <MudAlert Severity="Severity.Warning" Class="mt-4">
                    Disclaimer: By default all data is stored in memory and will be deleted when you close this website.
                    Steam API requests will be proxied through Cloudflare, your credentials are not stored on the server, Cloudflare automatically redacts your API key from the logs.
                    If you don't feel comfortable with this, don't use this website.
                </MudAlert>

                <MudNumericField T="ulong?" Label="SteamID" @bind-Value="_steamId" HideSpinButtons="true" Immediate="true"/>

                <MudTextField Label="API Key" @bind-Value="_apiKey" Immediate="true"/>

                <MudAlert Severity="Severity.Info" Class="mt-4">
                    You can find your API key <MudLink Typo="Typo.body2" Href="https://steamcommunity.com/dev/apikey" Target="_blank">here</MudLink>.
                </MudAlert>

                <MudCheckBox Label="Store credentials in local storage (insecure)" @bind-Value="_useLocalStorage" Class="mt-4"/>

                @if (_useLocalStorage)
                {
                    <MudAlert Severity="Severity.Warning" Class="mt-4">
                        If you enable this option, your credentials will be stored in your browser's local storage.
                        This allows you to use the tool without having to re-enter your credentials every time.
                        Your credentials will be stored in plain text, so anyone with access to your computer can read them.
                    </MudAlert>
                }

                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Class="mt-4" OnClick="@Save" Disabled="@(!_isValid)">Apply</MudButton>
            </MudForm>
        </MudPaper>
    </MudContainer>
}

@code
{
    private bool _useLocalStorage = false;

    private ulong? _steamId = null;
    private string _apiKey = string.Empty;
    private bool _isValid = false;

    [Parameter, EditorRequired]
    public EventCallback OnSave { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadFromLocalStorage();
    }

    private void Validate()
    {
        _isValid = _steamId is not null && _steamId != 0 && !string.IsNullOrEmpty(_apiKey);
    }

    private async Task Save()
    {
        Validate();
        if (!_isValid || _steamId is null)
        {
            return;
        }

        var credentials = new ApiCredentials(SteamId: (ulong)_steamId, ApiKey: _apiKey);

        try
        {
            Api.Configure(credentials);
        }
        catch (ArgumentException e)
        {
            Snackbar.Add(e.Message, Severity.Error);
            return;
        }

        await SaveToLocalStorage(credentials);

        Snackbar.Add("API credentials are configured, you can now use the tool.", Severity.Success);

        await OnSave.InvokeAsync();
    }

    private async Task SaveToLocalStorage(ApiCredentials credentials)
    {
        if (!_useLocalStorage)
        {
            return;
        }

        await LocalStorage.SetItemAsync(ApiCredentials.LocalStorageKey, credentials);

        Snackbar.Add("Your credentials are stored in local storage.", Severity.Info, options =>
        {
            options.CloseAfterNavigation = false;
            options.ShowCloseIcon = false;
            options.RequireInteraction = true;
            options.Action = "Delete";
            options.ActionColor = Color.Info;
            options.ActionVariant = Variant.Text;
            options.OnClick = _ => DeleteFromLocalStorage();
        }, "DeleteFromLocalStoragePersistentNotification");
    }

    private async Task LoadFromLocalStorage()
    {
        var credentials = await LocalStorage.GetItemAsync<ApiCredentials>(ApiCredentials.LocalStorageKey);
        if (credentials is null)
        {
            return;
        }

        _steamId = credentials.SteamId;
        _apiKey = credentials.ApiKey;
        _useLocalStorage = true;

        await Save();
    }

    private async Task DeleteFromLocalStorage()
    {
        await LocalStorage.RemoveItemAsync(ApiCredentials.LocalStorageKey);
        Api.ResetConfiguration();

        _apiKey = string.Empty;
        _steamId = null;
        _isValid = false;
        _useLocalStorage = false;

        Snackbar.Add("Credentials deleted.", Severity.Success);

        await OnSave.InvokeAsync();
    }
}
